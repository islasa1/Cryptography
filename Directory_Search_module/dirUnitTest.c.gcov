        -:    0:Source:/home/anthony/Documents/Classes/Cryptography/Directory_Search_module/dirUnitTest.c
        -:    0:Graph:./obj/dirUnitTest.gcno
        -:    0:Data:./obj/dirUnitTest.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:#include <unistd.h>
        -:    5:
        -:    6:#include "stack.h"
        -:    7:#include "dir_search.h"
        -:    8:
        -:    9:// Test driver for search, soak test
        -:   10:	
function main called 2 returned 100% blocks executed 94%
        2:   11:int main(void)
        -:   12:{
        2:   13:	itemS_t* file = NULL;
        2:   14:	STACK_t* myFiles = NULL;
        2:   15:	char userInput = '\0';
        2:   16:	bool success = false;
        2:   17:	scanf(" %c", &userInput);
call    0 returned 100%
        -:   18:
       11:   19:	while(userInput != 'q')
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:   20:	{
        7:   21:		file = NULL;
        7:   22:		myFiles = NULL;
        -:   23:		
        7:   24:		switch(userInput)
branch  0 taken 14%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 14%
branch  4 taken 14%
branch  5 taken 14%
branch  6 taken 14%
branch  7 taken 0%
        -:   25:		{
        -:   26:			success = false;
        -:   27:			case '1':
        1:   28:				myFiles = search("", false, false);
call    0 returned 100%
        1:   29:				break;
        -:   30:			case '2':
        1:   31:				myFiles = search("", false, true);
call    0 returned 100%
        1:   32:				break;
        -:   33:			case '3':
        1:   34:				myFiles = search("..", true, false);
call    0 returned 100%
        1:   35:				break;
        -:   36:			case '4':
        1:   37:				myFiles = search("..", true, true);
call    0 returned 100%
        1:   38:				break;
        -:   39:			case '5':
        1:   40:				myFiles = search("../../../../..", true, false);
call    0 returned 100%
        1:   41:				break;
        -:   42:			case '6': 
        1:   43:				myFiles = search("EmptyFolder", false, false);
call    0 returned 100%
        1:   44:				break;
        -:   45:			case '7': 
        1:   46:				myFiles = search("/", false, false);
call    0 returned 100%
        -:   47:			default:
        1:   48:				break;
        -:   49:		}
        -:   50:		
        7:   51:		if(myFiles != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   52:		{
        7:   53:			file = pop(myFiles);
call    0 returned 100%
        7:   54:			success = true;
        -:   55:		}
    #####:   56:		else file = NULL;
    10296:   57:		while(file != NULL)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   58:		{
    10282:   59:			free(file->keyValue);
    10282:   60:			free(file);
    10282:   61:			file = pop(myFiles);
call    0 returned 100%
        -:   62:		}
        7:   63:		free(myFiles);
        -:   64:
        7:   65:		success ? printf("Success!\n") : printf("Fail!\n");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        -:   66:		
        7:   67:		scanf(" %c", &userInput);
call    0 returned 100%
        -:   68:	}
        -:   69:  
        2:   70:	return 0;
        -:   71:}
