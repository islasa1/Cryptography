        -:    0:Source:/home/anthony/Documents/Classes/Cryptography/Shell_utilities/utilsTest.c
        -:    0:Graph:./obj/utilsTest.gcno
        -:    0:Data:./obj/utilsTest.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:#include "shell_utils.c"
        -:    4:
        -:    5:#define TAG "myTag"
        -:    6:#define NOT_TAG "notMyTag"
        -:    7:
function main called 2 returned 100% blocks executed 81%
        2:    8:int main(void)
        -:    9:{
        -:   10:  FILE* input;
        2:   11:  char userInput = '\0';
        -:   12:  
        2:   13:  scanf(" %c", &userInput);
call    0 returned 100%
        -:   14:  
       10:   15:  while(userInput != 'q')
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   16:  { 
        6:   17:    switch(userInput)
branch  0 taken 17%
branch  1 taken 17%
branch  2 taken 17%
branch  3 taken 17%
branch  4 taken 17%
branch  5 taken 17%
branch  6 taken 0%
        -:   18:    {
        -:   19:      case 't':
        1:   20:        if((input = fopen("test.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   21:        {
    #####:   22:          printf("Could not create file.\n");
call    0 never executed
    #####:   23:          exit(-1);
call    0 never executed
        -:   24:        }
        1:   25:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   26:        tagFile(input, TAG) ? printf("Tagged file!\n") : printf("Unable to tag file.\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        1:   27:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   28:        fclose(input);
call    0 returned 100%
        1:   29:        break;
        -:   30:      case 'c':
        1:   31:        if((input = fopen("test.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   32:        {
    #####:   33:          printf("Could not create file.\n");
call    0 never executed
    #####:   34:          exit(-1);
call    0 never executed
        -:   35:        }
        1:   36:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   37:        checkTag(input, TAG) ? printf("Tag found!\n") : printf("Could not find tag.\n");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 never executed
        1:   38:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   39:        fclose(input);
call    0 returned 100%
        1:   40:        break;
        -:   41:      case 'k': {
        1:   42:        loginSetCurUser(0);
call    0 returned 100%
        -:   43:
        -:   44:        unsigned int myKey[2][2];
        1:   45:        getKey(myKey) ? \
call    0 returned 100%
        1:   46:          printf("Created key:\n%u\t%u\n%u\t%u\n", myKey[0][0], myKey[0][1], myKey[1][0], myKey[1][1]) : printf("Could not make key.\n");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        1:   47:        break;
        -:   48:      }
        -:   49:      case '1':
        1:   50:        input = NULL;
        1:   51:        tagFile(input, TAG) ? printf("Tagged file!\n") : printf("Unable to tag file.\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
        1:   52:        break;
        -:   53:      case '2':
        1:   54:        if((input = fopen("test.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   55:        {
    #####:   56:          printf("Could not create file.\n");
call    0 never executed
    #####:   57:          exit(-1);
call    0 never executed
        -:   58:        }
        1:   59:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   60:        checkTag(input, NOT_TAG) ? printf("Tag found!\n") : printf("Could not find tag.\n");
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
        1:   61:        fseek(input, 0, SEEK_END);
call    0 returned 100%
        1:   62:        fclose(input);
call    0 returned 100%
        1:   63:        break;
        -:   64:      case '3': {
        1:   65:        loginSetCurUser(-1);
call    0 returned 100%
        -:   66:
        -:   67:        unsigned int myKey[2][2];
        1:   68:        getKey(myKey) ? \
call    0 returned 100%
        1:   69:          printf("Created key:\n%u\t%u\n%u\t%u\n", myKey[0][0], myKey[0][1], myKey[1][0], myKey[1][1]) : printf("Could not make key.\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 returned 100%
        1:   70:        break;
        -:   71:      }
        -:   72:    }
        6:   73:    scanf(" %c", &userInput);
call    0 returned 100%
        -:   74:  }
        -:   75:  
        -:   76:  
        2:   77:  printf("Compiled!\n");
call    0 returned 100%
        -:   78:}
