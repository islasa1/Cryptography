        -:    0:Source:/home/anthony/Documents/Classes/Cryptography/Encryption_module/src/utilities.c
        -:    0:Graph:./obj/utilities.gcno
        -:    0:Data:./obj/utilities.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "utilities.h"
        -:    2:
        -:    3:// Fisher-Yates shuffle
function shuffle called 140 returned 100% blocks executed 100%
      140:    4:void shuffle(int *array, int size, int seed)
        -:    5:{
        -:    6:	// Our "seed"
      140:    7:	unsigned int *seedp = ((unsigned int*) &seed);
        -:    8:	int i, j;
        -:    9:	int temp;
        -:   10:	
  1616644:   11:	for(i = size; i > 0; i--)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   12:	{
        -:   13:		// Note: We don't care about how "weak" rand_r() may be since we mod anyhow
  1616504:   14:		j =   rand_r(seedp) % i;
call    0 returned 100%
  1616504:   15:		temp = array[j];
  1616504:   16:		array[j] = array[i-1];
  1616504:   17:		array[i-1] = temp;
        -:   18:	}
      140:   19:}
