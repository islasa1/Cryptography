        -:    0:Source:/home/anthony/Documents/Classes/Cryptography/Encryption_module/src/test.c
        -:    0:Graph:./obj/test.gcno
        -:    0:Data:./obj/test.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <stdbool.h>
        -:    4:
        -:    5:#define USE_DEF_KEY2
        -:    6:
        -:    7:extern const unsigned int default_key[2][2];
        -:    8:extern const unsigned int default_keyInverse[2][2];
        -:    9:
        -:   10:#include "hillcipher.h"
        -:   11:#include "TSHencrypt.h"
        -:   12:
function main called 2 returned 100% blocks executed 69%
        2:   13:int main(void)
        -:   14:{
        -:   15:	FILE *testFile, *outputFile, *decryptFile;
        -:   16:	
        2:   17:	char userInput = '\0';
        -:   18:	
        2:   19:	scanf(" %c", &userInput);
call    0 returned 100%
        -:   20:	
       11:   21:	while(userInput != 'q')
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:   22:	{
        7:   23:		switch(userInput)
branch  0 taken 14%
branch  1 taken 14%
branch  2 taken 14%
branch  3 taken 14%
branch  4 taken 14%
branch  5 taken 14%
branch  6 taken 14%
branch  7 taken 0%
        -:   24:		{
        -:   25:			case 	'1':
        1:   26:				if((testFile = fopen("test.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   27:				{
    #####:   28:					printf("File not found\n");
call    0 never executed
    #####:   29:					break;
        -:   30:				}
        1:   31:				if((outputFile = fopen("test.txt.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   32:				{
    #####:   33:					printf("Could not open output file\n");
call    0 never executed
    #####:   34:					break;
        -:   35:				}
        1:   36:				if((decryptFile = fopen("testDecrpt.txt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   37:				{
    #####:   38:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:   39:					break;
        -:   40:				}
        -:   41:
        1:   42:				encrypt(testFile, outputFile, default_key, MODE_TEXT);
call    0 returned 100%
        1:   43:				decrypt(outputFile, decryptFile, default_key, MODE_TEXT);
call    0 returned 100%
        -:   44:
        1:   45:				fclose(testFile);
call    0 returned 100%
        1:   46:				fclose(outputFile);
call    0 returned 100%
        1:   47:				fclose(decryptFile);
call    0 returned 100%
        -:   48:				
        1:   49:				printf("Done!\n");
call    0 returned 100%
        -:   50:				
        1:   51:				break;
        -:   52:			case 	'2':
        1:   53:				if((testFile = fopen("large.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   54:				{
    #####:   55:					printf("File not found\n");
call    0 never executed
    #####:   56:					break;
        -:   57:				}
        1:   58:				if((outputFile = fopen("large.txt.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   59:				{
    #####:   60:					printf("Could not open output file\n");
call    0 never executed
    #####:   61:					break;
        -:   62:				}
        1:   63:				if((decryptFile = fopen("largeDecrpt.txt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   64:				{
    #####:   65:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:   66:					break;
        -:   67:				}
        -:   68:
        1:   69:				encrypt(testFile, outputFile, default_key, MODE_TEXT);
call    0 returned 100%
        1:   70:				decrypt(outputFile, decryptFile, default_key, MODE_TEXT);
call    0 returned 100%
        -:   71:
        1:   72:				fclose(testFile);
call    0 returned 100%
        1:   73:				fclose(outputFile);
call    0 returned 100%
        1:   74:				fclose(decryptFile);
call    0 returned 100%
        -:   75:				
        1:   76:				printf("Done!\n");
call    0 returned 100%
        -:   77:				
        1:   78:				break;
        -:   79:			case 	'3':
        1:   80:				if((testFile = fopen("test.bin", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   81:				{
    #####:   82:					printf("File not found\n");
call    0 never executed
    #####:   83:					break;
        -:   84:				}
        1:   85:				if((outputFile = fopen("test.bin.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   86:				{
    #####:   87:					printf("Could not open output file\n");
call    0 never executed
    #####:   88:					break;
        -:   89:				}
        1:   90:				if((decryptFile = fopen("testDecrpt.bin", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   91:				{
    #####:   92:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:   93:					break;
        -:   94:				}
        -:   95:
        1:   96:				encrypt(testFile, outputFile, default_key, MODE_BINARY);
call    0 returned 100%
        1:   97:				decrypt(outputFile, decryptFile, default_key, MODE_BINARY);
call    0 returned 100%
        -:   98:
        1:   99:				fclose(testFile);
call    0 returned 100%
        1:  100:				fclose(outputFile);
call    0 returned 100%
        1:  101:				fclose(decryptFile);
call    0 returned 100%
        -:  102:				
        1:  103:				printf("Done!\n");
call    0 returned 100%
        -:  104:				
        1:  105:				break;
        -:  106:			case 	'4':
        1:  107:				if((testFile = fopen("large.bin", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  108:				{
    #####:  109:					printf("File not found\n");
call    0 never executed
    #####:  110:					break;
        -:  111:				}
        1:  112:				if((outputFile = fopen("large.bin.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  113:				{
    #####:  114:					printf("Could not open output file\n");
call    0 never executed
    #####:  115:					break;
        -:  116:				}
        1:  117:				if((decryptFile = fopen("largeDecrpt.bin", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  118:				{
    #####:  119:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:  120:					break;
        -:  121:				}
        -:  122:
        1:  123:				encrypt(testFile, outputFile, default_key, MODE_BINARY);
call    0 returned 100%
        1:  124:				decrypt(outputFile, decryptFile, default_key, MODE_BINARY);
call    0 returned 100%
        -:  125:
        1:  126:				fclose(testFile);
call    0 returned 100%
        1:  127:				fclose(outputFile);
call    0 returned 100%
        1:  128:				fclose(decryptFile);
call    0 returned 100%
        -:  129:				
        1:  130:				printf("Done!\n");
call    0 returned 100%
        -:  131:				
        1:  132:				break;
        -:  133:			case 	'5':
        1:  134:				if((testFile = fopen("oddByte.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  135:				{
    #####:  136:					printf("File not found\n");
call    0 never executed
    #####:  137:					break;
        -:  138:				}
        1:  139:				if((outputFile = fopen("oddByte.txt.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  140:				{
    #####:  141:					printf("Could not open output file\n");
call    0 never executed
    #####:  142:					break;
        -:  143:				}
        1:  144:				if((decryptFile = fopen("oddByteDecrpt.txt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  145:				{
    #####:  146:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:  147:					break;
        -:  148:				}
        -:  149:
        1:  150:				encrypt(testFile, outputFile, default_key, MODE_TEXT);
call    0 returned 100%
        1:  151:				decrypt(outputFile, decryptFile, default_key, MODE_TEXT);
call    0 returned 100%
        -:  152:
        1:  153:				fclose(testFile);
call    0 returned 100%
        1:  154:				fclose(outputFile);
call    0 returned 100%
        1:  155:				fclose(decryptFile);
call    0 returned 100%
        -:  156:				
        1:  157:				printf("Done!\n");
call    0 returned 100%
        -:  158:				
        1:  159:				break;
        -:  160:			case '6':
        1:  161:				if((testFile = fopen("test.txt", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:				{
    #####:  163:					printf("File not found\n");
call    0 never executed
    #####:  164:					break;
        -:  165:				}
        1:  166:				if((outputFile = fopen("test.txt.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  167:				{
    #####:  168:					printf("Could not open output file\n");
call    0 never executed
    #####:  169:					break;
        -:  170:				}
        1:  171:				if((decryptFile = fopen("testDecrpt.txt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  172:				{
    #####:  173:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:  174:					break;
        -:  175:				}
        -:  176:
        1:  177:				encrypt(testFile, outputFile, default_key, MODE_BINARY);
call    0 returned 100%
        1:  178:				decrypt(outputFile, decryptFile, default_key, MODE_TEXT);
call    0 returned 100%
        -:  179:
        1:  180:				fclose(testFile);
call    0 returned 100%
        1:  181:				fclose(outputFile);
call    0 returned 100%
        1:  182:				fclose(decryptFile);
call    0 returned 100%
        -:  183:				
        1:  184:				printf("Done!\n");
call    0 returned 100%
        -:  185:				
        1:  186:				break;
        -:  187:			case '7':
        1:  188:				if((testFile = fopen("test.bin", "r+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  189:				{
    #####:  190:					printf("File not found\n");
call    0 never executed
    #####:  191:					break;
        -:  192:				}
        1:  193:				if((outputFile = fopen("test.bin.crpt", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  194:				{
    #####:  195:					printf("Could not open output file\n");
call    0 never executed
    #####:  196:					break;
        -:  197:				}
        1:  198:				if((decryptFile = fopen("testDecrpt.bin", "w+")) == NULL)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  199:				{
    #####:  200:					printf("Could not open decrypt file\n");
call    0 never executed
    #####:  201:					break;
        -:  202:				}
        -:  203:
        1:  204:				encrypt(testFile, outputFile, default_key, MODE_TEXT);
call    0 returned 100%
        1:  205:				decrypt(outputFile, decryptFile, default_key, MODE_TEXT);
call    0 returned 100%
        -:  206:
        1:  207:				fclose(testFile);
call    0 returned 100%
        1:  208:				fclose(outputFile);
call    0 returned 100%
        1:  209:				fclose(decryptFile);
call    0 returned 100%
        -:  210:				
        1:  211:				printf("Done!\n");
call    0 returned 100%
        -:  212:				
        1:  213:				break;
        -:  214:			default:
    #####:  215:				printf("Option not found\n");
call    0 never executed
    #####:  216:				break;
        -:  217:		}
        -:  218:		
        7:  219:		scanf(" %c", &userInput);
call    0 returned 100%
        -:  220:	}
        -:  221:	
        2:  222:	return 0;
        -:  223:}
