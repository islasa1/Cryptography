#!/usr/bin/expect

## Take off comments from sleeps to make a 'clean'
## output to console if log_user is true

set successMsg "SUCCESS"
set failureMsg "FAILURE"
set timeoutMsg "TIMEOUT"

## Show Proper Compilation
spawn -noecho bash
set timeout 1
log_user 0

###########################################################
puts "\n##### Compilation Test #####"

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
puts "\n~~~ Make Clean on all modules ~~~"
## clean
send "cd Directory_Search_module/\n"
  send "make clean\n"
send "cd ../Encryption_module/src/\n"
  send "make clean\n"
send "cd ../../login_module/\n"
  send "make clean\n"
send "cd ../minishell/\n"
  send "make clean\n"
  
## Need to find a better way to wait for output to finish
## sleep 0.5

expect {
  -re {make: \*\*\* \[clean\]} {
    puts "Clean: \t\t$failureMsg"
   }
   timeout {
    puts "Clean: \t\t$successMsg"
   }
}  

## Clear expect buffer
expect *

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
puts "\n~~~ Make on all modules ~~~"
## Make 
send "cd ../Directory_Search_module/\n"
  send "make\n"
send "cd ../Encryption_module/src/\n"
  send "make\n"
send "cd ../../login_module/\n"
  send "make\n"
send "cd ../minishell/\n"
  send "make\n"

## sleep 1

expect {
  -re "make:" {
    puts "Make: \t\t$failureMsg"
    puts "Compilation: \t$failureMsg"
    exit
  }
  -timeout 0
  timeout {
    puts "Make: \t\t$successMsg"
    puts "Compilation: \t$successMsg"
  }
}

## Use this to "buffer" expect interpreter 
expect *
expect timeout {}

###########################################################
puts "\n##### Unit Tests #####"

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
puts "\n~~~ Encryption Module ~~~"

send "cd ../Encryption_module/src/\n" 
send "./tshTest\n"
send "diff test.txt testDecrpt.txt -s\n"

## sleep 1

expect {
  -re "are identical" {
    puts "Encryption:\t$successMsg"
  }
  timeout {
    puts "Encryption:\t$failureMsg"
  }
}

## Remove files so test can be rerun from scratch
send "rm -f testEn.txt\n"
send "rm -f testDecrpt.txt\n"

expect *
expect timeout {}

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
puts "\n~~~ Directory Search Module ~~~"

send "cd ../../Directory_Search_module\n"
send "./dirUnitTest\n"


expect {
  -re "directories" {
    ## For some reason 'D' wont show up..?
    puts "Dir Search:\t$successMsg"
  }
  -timeout 5 
  timeout {
    puts "Dir Search:\t$timeoutMsg"
  }
}

expect *
expect timeout {}

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
puts "\n~~~ Login Module ~~~"

send "cd ../login_module\n"

## positive test cases
## Must do expect on interactive sequences to control flow, 
## I don't know why, but this is the way examples from online work
## https://www.usenix.org/legacy/publications/compsystems/1991/spr_libes.pdf

## ===============================
## Login as existing user
send "./login\n"
expect "Enter"
  send "l\n"
expect "*username"
  send "islasa1\n"
expect "Password"
  send "password\n"
expect "Enter"
  send "q\n"

expect {
  -re "Complete!" {
    puts "Login:\t\t$successMsg"
  }
  timeout {
    puts "Login:\t\t$timeoutMsg"
  }
}

## ===============================
## Login creating new user
send "./login\n"
expect "Enter"
  send "n\n"
expect "*username"
  send "foobar\n"
expect {
  -re Password {
    send "12345678\n"
    expect "Enter"
      send "q\n"
  }
  -re Error {
    send "q\n"
  }
}

expect {
  -re "Complete!" {
    puts "New User:\t$successMsg"
  }
  -re "Fail!" {
    puts "New User:\t$failureMsg"
  }
  timeout {
    puts "New User:\t$timeoutMsg"
  }
}

expect *


## ===============================
## Delete newly created user
send "./login\n"
expect "Enter"
  send "l\n"
expect "*username"
  send "islasa1\n"
expect "Password"
  send "password\n"
expect "ADMIN"
expect "Enter"
  send "d\n"
expect "*username"
  send "foobar\n"
expect {Delete user [a-zA-Z]{6, 8}?}
  send "Y\n"
expect "Enter"
  send "q\n"

expect {
  -re "Complete!" {
    puts "Del User:\t$successMsg"
  }
  -re "Fail!" {
    puts "Del User:\t$failureMsg"
  }
  timeout {
    puts "Del User:\t$timeoutMsg"
  }
}



expect timeout {}

